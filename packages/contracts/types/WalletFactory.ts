/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface WalletFactoryInterface extends utils.Interface {
  functions: {
    "clone(address)": FunctionFragment;
    "getWallets(address)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "clone" | "getWallets"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "clone",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getWallets",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "clone", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getWallets", data: BytesLike): Result;

  events: {
    "WalletCreated(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "WalletCreated"): EventFragment;
}

export interface WalletCreatedEventObject {
  creator: string;
  wallet: string;
}
export type WalletCreatedEvent = TypedEvent<
  [string, string],
  WalletCreatedEventObject
>;

export type WalletCreatedEventFilter = TypedEventFilter<WalletCreatedEvent>;

export interface WalletFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WalletFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    clone(
      implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getWallets(
      creator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;
  };

  clone(
    implementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getWallets(
    creator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  callStatic: {
    clone(
      implementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getWallets(
      creator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;
  };

  filters: {
    "WalletCreated(address,address)"(
      creator?: null,
      wallet?: null
    ): WalletCreatedEventFilter;
    WalletCreated(creator?: null, wallet?: null): WalletCreatedEventFilter;
  };

  estimateGas: {
    clone(
      implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getWallets(
      creator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    clone(
      implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getWallets(
      creator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
