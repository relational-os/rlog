/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace Tag {
  export type TagContentsStruct = {
    id: PromiseOrValue<BigNumberish>;
    author: PromiseOrValue<string>;
    createdTimestamp: PromiseOrValue<BigNumberish>;
    name: PromiseOrValue<string>;
  };

  export type TagContentsStructOutput = [
    BigNumber,
    string,
    BigNumber,
    string
  ] & {
    id: BigNumber;
    author: string;
    createdTimestamp: BigNumber;
    name: string;
  };
}

export interface TagInterface extends utils.Interface {
  functions: {
    "create(string)": FunctionFragment;
    "tagID()": FunctionFragment;
    "tags(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "create" | "tagID" | "tags"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "create",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "tagID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tags",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tagID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tags", data: BytesLike): Result;

  events: {
    "TagCreated(uint256,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TagCreated"): EventFragment;
}

export interface TagCreatedEventObject {
  id: BigNumber;
  tag: Tag.TagContentsStructOutput;
}
export type TagCreatedEvent = TypedEvent<
  [BigNumber, Tag.TagContentsStructOutput],
  TagCreatedEventObject
>;

export type TagCreatedEventFilter = TypedEventFilter<TagCreatedEvent>;

export interface Tag extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TagInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    create(
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tagID(overrides?: CallOverrides): Promise<[BigNumber]>;

    tags(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, string] & {
        id: BigNumber;
        author: string;
        createdTimestamp: BigNumber;
        name: string;
      }
    >;
  };

  create(
    name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tagID(overrides?: CallOverrides): Promise<BigNumber>;

  tags(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, string] & {
      id: BigNumber;
      author: string;
      createdTimestamp: BigNumber;
      name: string;
    }
  >;

  callStatic: {
    create(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    tagID(overrides?: CallOverrides): Promise<BigNumber>;

    tags(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, string] & {
        id: BigNumber;
        author: string;
        createdTimestamp: BigNumber;
        name: string;
      }
    >;
  };

  filters: {
    "TagCreated(uint256,tuple)"(id?: null, tag?: null): TagCreatedEventFilter;
    TagCreated(id?: null, tag?: null): TagCreatedEventFilter;
  };

  estimateGas: {
    create(
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tagID(overrides?: CallOverrides): Promise<BigNumber>;

    tags(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    create(
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tagID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tags(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
