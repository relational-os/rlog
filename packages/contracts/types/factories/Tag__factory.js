"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tag__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
const ethers_1 = require("ethers");
const _abi = [
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "uint256",
                name: "id",
                type: "uint256",
            },
            {
                components: [
                    {
                        internalType: "address",
                        name: "addr",
                        type: "address",
                    },
                    {
                        internalType: "uint256",
                        name: "id",
                        type: "uint256",
                    },
                ],
                indexed: false,
                internalType: "struct Relational.Relationship",
                name: "relationship",
                type: "tuple",
            },
        ],
        name: "RelationshipAdded",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "uint256",
                name: "id",
                type: "uint256",
            },
            {
                components: [
                    {
                        internalType: "uint256",
                        name: "id",
                        type: "uint256",
                    },
                    {
                        internalType: "address",
                        name: "author",
                        type: "address",
                    },
                    {
                        internalType: "uint256",
                        name: "createdTimestamp",
                        type: "uint256",
                    },
                    {
                        internalType: "string",
                        name: "name",
                        type: "string",
                    },
                    {
                        components: [
                            {
                                internalType: "address",
                                name: "addr",
                                type: "address",
                            },
                            {
                                internalType: "uint256",
                                name: "id",
                                type: "uint256",
                            },
                        ],
                        internalType: "struct Relational.Relationship[]",
                        name: "relationships",
                        type: "tuple[]",
                    },
                ],
                indexed: false,
                internalType: "struct Tag.TagContents",
                name: "tag",
                type: "tuple",
            },
        ],
        name: "TagCreated",
        type: "event",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "tagID",
                type: "uint256",
            },
            {
                components: [
                    {
                        internalType: "address",
                        name: "addr",
                        type: "address",
                    },
                    {
                        internalType: "uint256",
                        name: "id",
                        type: "uint256",
                    },
                ],
                internalType: "struct Relational.Relationship",
                name: "relationship",
                type: "tuple",
            },
        ],
        name: "addBiDirectionalRelationship",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "tagID",
                type: "uint256",
            },
            {
                components: [
                    {
                        internalType: "address",
                        name: "addr",
                        type: "address",
                    },
                    {
                        internalType: "uint256",
                        name: "id",
                        type: "uint256",
                    },
                ],
                internalType: "struct Relational.Relationship",
                name: "relationship",
                type: "tuple",
            },
        ],
        name: "addUniDirectionalRelationship",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "string",
                name: "name",
                type: "string",
            },
            {
                components: [
                    {
                        internalType: "address",
                        name: "addr",
                        type: "address",
                    },
                    {
                        internalType: "uint256",
                        name: "id",
                        type: "uint256",
                    },
                ],
                internalType: "struct Relational.Relationship[]",
                name: "relationships",
                type: "tuple[]",
            },
        ],
        name: "create",
        outputs: [
            {
                internalType: "uint256",
                name: "id",
                type: "uint256",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "tagCount",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        name: "tags",
        outputs: [
            {
                internalType: "uint256",
                name: "id",
                type: "uint256",
            },
            {
                internalType: "address",
                name: "author",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "createdTimestamp",
                type: "uint256",
            },
            {
                internalType: "string",
                name: "name",
                type: "string",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
];
const _bytecode = "0x608060405234801561001057600080fd5b506108ff806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806320822abc1461005c57806347bde2db146100885780636f810cbc146100a95780639bb96fb6146100b25780639e4605d4146100c7575b600080fd5b61006f61006a36600461039f565b6100da565b60405161007f94939291906103b8565b60405180910390f35b61009b610096366004610559565b610197565b60405190815260200161007f565b61009b60015481565b6100c56100c0366004610611565b610270565b005b6100c56100d5366004610611565b610306565b600060208190529081526040902080546001820154600283015460038401805493946001600160a01b03909316939192916101149061063e565b80601f01602080910402602001604051908101604052809291908181526020018280546101409061063e565b801561018d5780601f106101625761010080835404028352916020019161018d565b820191906000526020600020905b81548152906001019060200180831161017057829003601f168201915b5050505050905084565b60018054600081815260208190526040902081815591820180546001600160a01b0319163317905542600283015590600381016101d485826106c6565b5060005b8351811015610218576102066001548583815181106101f9576101f9610786565b6020026020010151610270565b806102108161079c565b9150506101d8565b507fff68782013636b22263c699f9f501086d2580d1e2fab8ea1d867efccd6397efe6001548260405161024c929190610818565b60405180910390a1600180549060006102648361079c565b91905055505092915050565b60408051808201825230815260208082018581528451918501519351632791817560e21b8152600481019490945282516001600160a01b039081166024860152905160448501529192911690639e4605d490606401600060405180830381600087803b1580156102df57600080fd5b505af11580156102f3573d6000803e3d6000fd5b505050506103018383610306565b505050565b6000828152602081815260408083206004810180546001808201835591865294849020865160029096020180546001600160a01b0319166001600160a01b03968716178155868501805191909201558251878152865190951693850193909352915190830152907f2c9c21b47ecc3b161a8321182d9393b143a87f0317ffc09626e3ed2f1b8c42039060600160405180910390a1505050565b6000602082840312156103b157600080fd5b5035919050565b8481526000602060018060a01b0386168184015284604084015260806060840152835180608085015260005b818110156104005785810183015185820160a0015282016103e4565b50600060a0828601015260a0601f19601f8301168501019250505095945050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561046357610463610424565b604052919050565b60006040828403121561047d57600080fd5b6040516040810181811067ffffffffffffffff821117156104a0576104a0610424565b60405290508082356001600160a01b03811681146104bd57600080fd5b8152602092830135920191909152919050565b600082601f8301126104e157600080fd5b8135602067ffffffffffffffff8211156104fd576104fd610424565b61050b818360051b0161043a565b82815260069290921b8401810191818101908684111561052a57600080fd5b8286015b8481101561054e57610540888261046b565b83529183019160400161052e565b509695505050505050565b6000806040838503121561056c57600080fd5b823567ffffffffffffffff8082111561058457600080fd5b818501915085601f83011261059857600080fd5b81356020828211156105ac576105ac610424565b6105be601f8301601f1916820161043a565b82815288828487010111156105d257600080fd5b828286018383013760009281018201929092529094508501359150808211156105fa57600080fd5b50610607858286016104d0565b9150509250929050565b6000806060838503121561062457600080fd5b82359150610635846020850161046b565b90509250929050565b600181811c9082168061065257607f821691505b60208210810361067257634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561030157600081815260208120601f850160051c8101602086101561069f5750805b601f850160051c820191505b818110156106be578281556001016106ab565b505050505050565b815167ffffffffffffffff8111156106e0576106e0610424565b6106f4816106ee845461063e565b84610678565b602080601f83116001811461072957600084156107115750858301515b600019600386901b1c1916600185901b1785556106be565b600085815260208120601f198616915b8281101561075857888601518255948401946001909101908401610739565b50858210156107765787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b6000600182016107bc57634e487b7160e01b600052601160045260246000fd5b5060010190565b6000815480845260208085019450836000528060002060005b8381101561080d5781546001600160a01b0316875260018281015484890152604090970196600290920191016107dc565b509495945050505050565b8281526000602060408184015283546040840152600180600160a01b0381860154166060850152600285015460808501526003850160a080860152600081546108608161063e565b8060e089015261010085831660008114610881576001811461089b576108c9565b60ff1984168a83015282151560051b8a01820194506108c9565b856000528760002060005b848110156108c15781548c82018501529088019089016108a6565b8b0183019550505b50505050858103603f190160c08701526108e681600489016107c3565b9897505050505050505056fea164736f6c6343000811000a";
const isSuperArgs = (xs) => xs.length > 1;
class Tag__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.Tag__factory = Tag__factory;
Tag__factory.bytecode = _bytecode;
Tag__factory.abi = _abi;
