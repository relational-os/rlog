/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Log, LogInterface } from "../Log";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "author",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "createdTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "modifiedTimestamp",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "data",
            type: "string",
          },
          {
            components: [
              {
                internalType: "address",
                name: "addr",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "id",
                type: "uint256",
              },
            ],
            internalType: "struct Relational.Relationship[]",
            name: "relationships",
            type: "tuple[]",
          },
        ],
        indexed: false,
        internalType: "struct Relational.Post",
        name: "data",
        type: "tuple",
      },
    ],
    name: "LogCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "data",
        type: "string",
      },
    ],
    name: "LogEdited",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "LogRemoved",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "data",
        type: "string",
      },
    ],
    name: "create",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "data",
        type: "string",
      },
    ],
    name: "edit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "logID",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "logs",
    outputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "author",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "createdTimestamp",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "modifiedTimestamp",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "data",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "remove",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506107ed806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806336423f541461005c5780634cc82215146100715780637af6039e14610084578063b6a46b3b146100a0578063e79899bd146100b3575b600080fd5b61006f61006a3660046104e7565b6100d7565b005b61006f61007f36600461052e565b610140565b61008d60015481565b6040519081526020015b60405180910390f35b61006f6100ae366004610547565b6101c5565b6100c66100c136600461052e565b610264565b6040516100979594939291906105d1565b60008281526020818152604090912042600382015582519091610101916004840191850190610327565b507f45171689d6828acd082ae729fcc0526eaadbf9efdb85bc3c401787b741b01586838360405161013392919061060f565b60405180910390a1505050565b60008181526020819052604081208181556001810180546001600160a01b031916905560028101829055600381018290559061017f60048301826103ab565b61018d6005830160006103e8565b50506040518181527f25462627c9fafd28b391931aba322a8a25cf69c777e246b13ee864f8361a56789060200160405180910390a150565b6001805460008181526020818152604090912091825591810180546001600160a01b031916331790554260028201819055600382015582519091610210916004840191850190610327565b5080546040517fd52a3ae8776152e112dab9cf8d1b0caeff95c8e58f7a712b4e7604ad739db981916102439184906106b7565b60405180910390a16001805490600061025b836107b9565b91905055505050565b6000602081905290815260409020805460018201546002830154600384015460048501805494956001600160a01b0390941694929391926102a490610628565b80601f01602080910402602001604051908101604052809291908181526020018280546102d090610628565b801561031d5780601f106102f25761010080835404028352916020019161031d565b820191906000526020600020905b81548152906001019060200180831161030057829003601f168201915b5050505050905085565b82805461033390610628565b90600052602060002090601f016020900481019282610355576000855561039b565b82601f1061036e57805160ff191683800117855561039b565b8280016001018555821561039b579182015b8281111561039b578251825591602001919060010190610380565b506103a7929150610409565b5090565b5080546103b790610628565b6000825580601f106103c7575050565b601f0160209004906000526020600020908101906103e59190610409565b50565b50805460008255600202906000526020600020908101906103e5919061041e565b5b808211156103a7576000815560010161040a565b5b808211156103a75780546001600160a01b03191681556000600182015560020161041f565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261046b57600080fd5b813567ffffffffffffffff8082111561048657610486610444565b604051601f8301601f19908116603f011681019082821181831017156104ae576104ae610444565b816040528381528660208588010111156104c757600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156104fa57600080fd5b82359150602083013567ffffffffffffffff81111561051857600080fd5b6105248582860161045a565b9150509250929050565b60006020828403121561054057600080fd5b5035919050565b60006020828403121561055957600080fd5b813567ffffffffffffffff81111561057057600080fd5b61057c8482850161045a565b949350505050565b6000815180845260005b818110156105aa5760208185018101518683018201520161058e565b818111156105bc576000602083870101525b50601f01601f19169290920160200192915050565b85815260018060a01b038516602082015283604082015282606082015260a06080820152600061060460a0830184610584565b979650505050505050565b82815260406020820152600061057c6040830184610584565b600181811c9082168061063c57607f821691505b60208210810361065c57634e487b7160e01b600052602260045260246000fd5b50919050565b6000815480845260208085019450836000528060002060005b838110156106ac5781546001600160a01b03168752600182810154848901526040909701966002909201910161067b565b509495945050505050565b8281526000602060408184015283546040840152600180600160a01b038186015416606085015260028501546080850152600385015460a08501526004850160c080860152600081548181851c90508482168061071557607f821691505b868210810361073257634e487b7160e01b84526022600452602484fd5b6101008901829052610120890181801561075357600181146107645761078f565b60ff1985168252888201955061078f565b60008781526020902060005b8581101561078957815484820152908901908a01610770565b83019650505b5050505050858103603f190160e08701526107ad8160058901610662565b98975050505050505050565b6000600182016107d957634e487b7160e01b600052601160045260246000fd5b506001019056fea164736f6c634300080d000a";

type LogConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LogConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Log__factory extends ContractFactory {
  constructor(...args: LogConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Log> {
    return super.deploy(overrides || {}) as Promise<Log>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Log {
    return super.attach(address) as Log;
  }
  override connect(signer: Signer): Log__factory {
    return super.connect(signer) as Log__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LogInterface {
    return new utils.Interface(_abi) as LogInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Log {
    return new Contract(address, _abi, signerOrProvider) as Log;
  }
}
