/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace Relational {
  export type RelationshipStruct = {
    addr: PromiseOrValue<string>;
    id: PromiseOrValue<BigNumberish>;
  };

  export type RelationshipStructOutput = [string, BigNumber] & {
    addr: string;
    id: BigNumber;
  };

  export type PostStruct = {
    id: PromiseOrValue<BigNumberish>;
    author: PromiseOrValue<string>;
    createdTimestamp: PromiseOrValue<BigNumberish>;
    modifiedTimestamp: PromiseOrValue<BigNumberish>;
    data: PromiseOrValue<string>;
    relationships: Relational.RelationshipStruct[];
  };

  export type PostStructOutput = [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    string,
    Relational.RelationshipStructOutput[]
  ] & {
    id: BigNumber;
    author: string;
    createdTimestamp: BigNumber;
    modifiedTimestamp: BigNumber;
    data: string;
    relationships: Relational.RelationshipStructOutput[];
  };
}

export interface CommentInterface extends utils.Interface {
  functions: {
    "commentID()": FunctionFragment;
    "comments(uint256)": FunctionFragment;
    "create(string,(address,uint256))": FunctionFragment;
    "edit(uint256,string)": FunctionFragment;
    "remove(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "commentID"
      | "comments"
      | "create"
      | "edit"
      | "remove"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "commentID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "comments",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [PromiseOrValue<string>, Relational.RelationshipStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "edit",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "remove",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "commentID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "comments", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "edit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "remove", data: BytesLike): Result;

  events: {
    "CommentCreated(uint256,tuple,tuple)": EventFragment;
    "CommentEdited(uint256,string)": EventFragment;
    "CommentRemoved(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CommentCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommentEdited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommentRemoved"): EventFragment;
}

export interface CommentCreatedEventObject {
  id: BigNumber;
  data: Relational.PostStructOutput;
  parent: Relational.RelationshipStructOutput;
}
export type CommentCreatedEvent = TypedEvent<
  [BigNumber, Relational.PostStructOutput, Relational.RelationshipStructOutput],
  CommentCreatedEventObject
>;

export type CommentCreatedEventFilter = TypedEventFilter<CommentCreatedEvent>;

export interface CommentEditedEventObject {
  id: BigNumber;
  data: string;
}
export type CommentEditedEvent = TypedEvent<
  [BigNumber, string],
  CommentEditedEventObject
>;

export type CommentEditedEventFilter = TypedEventFilter<CommentEditedEvent>;

export interface CommentRemovedEventObject {
  id: BigNumber;
}
export type CommentRemovedEvent = TypedEvent<
  [BigNumber],
  CommentRemovedEventObject
>;

export type CommentRemovedEventFilter = TypedEventFilter<CommentRemovedEvent>;

export interface Comment extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CommentInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    commentID(overrides?: CallOverrides): Promise<[BigNumber]>;

    comments(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, string] & {
        id: BigNumber;
        author: string;
        createdTimestamp: BigNumber;
        modifiedTimestamp: BigNumber;
        data: string;
      }
    >;

    create(
      data: PromiseOrValue<string>,
      parent: Relational.RelationshipStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    edit(
      id: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    remove(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  commentID(overrides?: CallOverrides): Promise<BigNumber>;

  comments(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, BigNumber, string] & {
      id: BigNumber;
      author: string;
      createdTimestamp: BigNumber;
      modifiedTimestamp: BigNumber;
      data: string;
    }
  >;

  create(
    data: PromiseOrValue<string>,
    parent: Relational.RelationshipStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  edit(
    id: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  remove(
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    commentID(overrides?: CallOverrides): Promise<BigNumber>;

    comments(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, string] & {
        id: BigNumber;
        author: string;
        createdTimestamp: BigNumber;
        modifiedTimestamp: BigNumber;
        data: string;
      }
    >;

    create(
      data: PromiseOrValue<string>,
      parent: Relational.RelationshipStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    edit(
      id: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    remove(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CommentCreated(uint256,tuple,tuple)"(
      id?: null,
      data?: null,
      parent?: null
    ): CommentCreatedEventFilter;
    CommentCreated(
      id?: null,
      data?: null,
      parent?: null
    ): CommentCreatedEventFilter;

    "CommentEdited(uint256,string)"(
      id?: null,
      data?: null
    ): CommentEditedEventFilter;
    CommentEdited(id?: null, data?: null): CommentEditedEventFilter;

    "CommentRemoved(uint256)"(id?: null): CommentRemovedEventFilter;
    CommentRemoved(id?: null): CommentRemovedEventFilter;
  };

  estimateGas: {
    commentID(overrides?: CallOverrides): Promise<BigNumber>;

    comments(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    create(
      data: PromiseOrValue<string>,
      parent: Relational.RelationshipStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    edit(
      id: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    remove(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    commentID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    comments(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    create(
      data: PromiseOrValue<string>,
      parent: Relational.RelationshipStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    edit(
      id: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    remove(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
